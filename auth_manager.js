// Generated by CoffeeScript 1.8.0

/*
  Auth item (permission or role)
 */

(function() {
  var Item, Permission, Role,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Item = (function() {
    function Item(options) {
      if (options == null) {
        options = {};
      }
      this.type = options.type || null;
      this.name = options.name || null;
      this.description = options.description || null;
      this.data = options.data || null;
    }

    return Item;

  })();


  /*
    User role auth item
   */

  Role = (function(_super) {
    __extends(Role, _super);

    function Role(options) {
      if (options == null) {
        options = {};
      }
      Role.__super__.constructor.call(this, options);
      this.type = RbacManager.TYPE_ROLE;
    }

    return Role;

  })(Item);


  /*
    Access permission
   */

  Permission = (function(_super) {
    __extends(Permission, _super);

    function Permission(options) {
      if (options == null) {
        options = {};
      }
      Permission.__super__.constructor.call(this, options);
      this.type = RbacManager.TYPE_PERMISSION;
      this.rule = options.rule || null;
    }

    return Permission;

  })(Item);


  /*
    Role base access control manager class
   */

  this.RbacManager = (function() {
    RbacManager.TYPE_ROLE = 1;

    RbacManager.TYPE_PERMISSION = 2;

    function RbacManager(options) {
      if (options == null) {
        options = {};
      }
      this.defaultRoles = options.defaultRoles || [];
      this.items = {};
      this.children = {};
      this.checkAccessRecursive = function(user, permissionName, params, assignments) {
        var fn, item, result, self;
        if (!this.items[permissionName]) {
          return false;
        }
        item = this.items[permissionName];
        if (!this.executeRule(item, user, params)) {
          return false;
        }
        if (_.contains(assignments, permissionName) || _.contains(this.defaultRoles, permissionName)) {
          return true;
        }
        self = this;
        fn = this.checkAccessRecursive;
        result = false;
        _.each(this.children, function(children, parentName) {
          if (children[permissionName] && fn.call(self, user, parentName, params, assignments)) {
            return result = true;
          }
        });
        return result;
      };
      this.addItem = function(item) {
        return this.items[item.name] = item;
      };
      this.executeRule = function(item, user, params) {
        if (item instanceof Role) {
          return true;
        }
        if (item.rule) {
          return item.rule.call(this, user, params);
        } else {
          return true;
        }
      };
    }

    RbacManager.prototype.createRole = function(roleName) {
      var role;
      role = new Role();
      role.name = roleName;
      this.addItem(role);
      return role;
    };

    RbacManager.prototype.createPermission = function(permissionName, ruleCallback) {
      var permission;
      if (ruleCallback == null) {
        ruleCallback = null;
      }
      permission = new Permission();
      permission.name = permissionName;
      permission.rule = ruleCallback;
      this.addItem(permission);
      return permission;
    };

    RbacManager.prototype.addChild = function(parent, child) {
      if (!this.items[parent.name] || !this.items[child.name]) {
        throw new Error("Either " + parent.name + " or " + child.name + " does not exist.");
      }
      if (parent.name === child.name) {
        throw new Error("Cannot add " + parent.name + " as a child of itself.");
      }
      if (parent instanceof Permission && child instanceof Role) {
        throw new Error("Cannot add a role as a child of a permission.");
      }
      if (!this.children[parent.name]) {
        this.children[parent.name] = {};
      }
      return this.children[parent.name][child.name] = this.items[child.name];
    };

    RbacManager.prototype.checkAccess = function(permissionName, params) {
      var assignments, user;
      user = Meteor.user();
      assignments = [];
      if (user) {
        assignments = user.roles;
      }
      return this.checkAccessRecursive(user, permissionName, params, assignments);
    };

    return RbacManager;

  })();

}).call(this);

//# sourceMappingURL=auth_manager.js.map
